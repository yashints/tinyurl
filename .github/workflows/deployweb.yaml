name: Deploy frontend only
on:
  push:
    branches:
      - main
    paths:
      - "frontend/**"
      - ".github/workflows/deployweb.yaml"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy-frontend:
    defaults:
      run:
        shell: bash
        working-directory: ./frontend
    runs-on: ubuntu-latest
    environment: production
    env:
      REACT_APP_CLIENT_ID: ${{ vars.REACT_APP_CLIENT_ID }}
      REACT_APP_AUTHORITY: ${{ vars.REACT_APP_AUTHORITY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@main

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"

      - name: Setup static web app cli
        run: |
          npm install -g @azure/static-web-apps-cli

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install dependencies
        run: npm install

      - name: Build the frontend
        run: npm run build

      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy the frontend
        run: |
          appName=$(az staticwebapp list -g ${{ secrets.AZURE_RESOURCE_GROUP }} --query "[0].name" -o tsv)
          deployToken=$(az staticwebapp secrets list --name $appName --query "properties.apiKey" -o tsv)
          swa deploy --env production -d $deployToken
